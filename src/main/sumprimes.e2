/* sum up all primes in [2..max], using inefficient algorithm from lecture 1. */
block([
  assign(max, 10000),
  assign(s, 0),
  assign(n, 2),
  while(leq(retrieve(n), retrieve(max)),
    block([
      assign(p, 1),  /* flag indicating primeness: initialize to true */
      assign(d, 2),
      while(leq(retrieve(d), sub(retrieve(n), 1)),
        block([           /* we have no mod operator... */
          assign(m, mul(retrieve(d), div(retrieve(n), retrieve(d)))),
          if(leq(retrieve(n), retrieve(m)),  /* always have m <= n */
            assign(p, 0),  /* i.e., n = m, so d divides n, so set p false */
            block()  /* (block) is a no-op */
          ),
          assign(d, add(retrieve(d), 1))
        ])
      ),
      if(retrieve(p),
        assign(s, add(retrieve(s), retrieve(n))),
        block()
      ),
      assign(n, add(retrieve(n), 1))
    ])
  ),
  write(retrieve(s))
])
